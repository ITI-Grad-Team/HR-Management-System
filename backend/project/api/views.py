from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response

class AdminViewSet(viewsets.ViewSet):
    """
    Handles admin-specific operations
    """
    
    @action(detail=False, methods=['post'])
    def invite_hr(self, request):
        """
        Creates HR account with autogenerated password and sends email
        Request data: {email: string}
        Response: {message: string}
        """
        pass
    
    @action(detail=False, methods=['get'])
    def view_all_users(self, request):
        """
        Returns all users (employees + HRs) with summary info and statistics
        Response: {users: array, statistics: object}
        """
        pass
    
    @action(detail=True, methods=['patch'])
    def promote_employee(self, request, pk=None):
        """
        Promotes employee to coordinator (sets is_coordinator=True)
        Response: {message: string}
        """
        pass

class HRViewSet(viewsets.ViewSet):
    """
    Handles HR-specific operations
    """
    
    @action(detail=False, methods=['post'])
    def create_application_link(self, request):
        """
        Creates new application link
        Request data: {link_name: string, position: string, 
                      skills: array, role: boolean, max_applicants: integer}
        Response: {link: object}
        """
        pass
    
    @action(detail=False, methods=['get'])
    def view_employees(self, request):
        """
        Returns all employees (hides other HRs)
        Response: {employees: array}
        """
        pass
    
    @action(detail=True, methods=['get'])
    def view_applicants(self, request, pk=None):
        """
        Shows applicants for specific application link
        Response: {applicants: array}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def schedule_interview(self, request, pk=None):
        """
        Sets interview datetime and sends email to applicant
        Request data: {datetime: string}
        Response: {message: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def conduct_interview(self, request, pk=None):
        """
        Starts interview with AI suggested questions
        Response: {questions: array, status: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def score_interview(self, request, pk=None):
        """
        Scores interview and marks status
        Request data: {scores: array, overall_score: number}
        Response: {message: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def accept_applicant(self, request, pk=None):
        """
        Accepts applicant and creates employee account
        Request data: {phone, mail, CV}
        Response: {employee: object, message: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def reject_applicant(self, request, pk=None):
        """
        Rejects applicant and sends email
        Response: {message: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def approve_overtime(self, request, pk=None):
        """
        Approves overtime claim for employee
        Response: {message: string}
        """
        pass
    
    @action(detail=False, methods=['get'])
    def view_salary_reports(self, request):
        """
        Returns monthly salary reports
        Response: {reports: array}
        """
        pass

class EmployeeViewSet(viewsets.ViewSet):
    """
    Handles employee-specific operations
    """
    
    @action(detail=False, methods=['post'])
    def check_in(self, request):
        """
        Records employee check-in time if conditions met
        Response: {message: string, check_in_time: string}
        """
        pass
    
    @action(detail=False, methods=['post'])
    def check_out(self, request):
        """
        Records employee check-out time if conditions met
        Response: {message: string, check_out_time: string}
        """
        pass
    
    @action(detail=False, methods=['post'])
    def submit_overtime_claim(self, request):
        """
        Submits overtime claim if grace period passed
        Request data: {hours: number, leave_date: string}
        Response: {message: string}
        """
        pass
    
    @action(detail=True, methods=['post'])
    def submit_task(self, request, pk=None):
        """
        Submits task work with file upload
        Request data: {file: file, ...}
        Response: {message: string, task: object}
        """
        pass
    
    @action(detail=False, methods=['get'])
    def view_tasks(self, request):
        """
        Returns all tasks assigned to employee
        Response: {tasks: array}
        """
        pass

class TaskViewSet(viewsets.ModelViewSet):
    """
    Handles task CRUD operations
    """
    
    def create(self, request):
        """
        Creates new task (coordinator only)
        Request data: {title: string, description: string, 
                      deadline: string, assigned_to: id}
        Response: {task: object}
        """
        pass
    
    def update(self, request, pk=None):
        """
        Updates task status (accept/reject with rating/reason)
        Request data: {status: string, rating: number, reason: string}
        Response: {task: object}
        """
        pass

class ApplicationLinkViewSet(viewsets.ModelViewSet):
    """
    Handles application link CRUD operations
    """
    
    @action(detail=True, methods=['post'])
    def apply(self, request, pk=None):
        """
        Handles job application submission
        Request data: {email: string, phone: string, cv: file}
        Response: {message: string, employee: object}
        """
        pass

class AuthViewSet(viewsets.ViewSet):
    """
    Handles authentication operations
    """
    
    @action(detail=False, methods=['post'])
    def login(self, request):
        """
        Authenticates user
        Request data: {username: string, password: string}
        Response: {token: string, user: object}
        """
        pass
    
    @action(detail=False, methods=['post'])
    def reset_password(self, request):
        """
        Resets user password
        Request data: {email: string}
        Response: {message: string}
        """
        pass